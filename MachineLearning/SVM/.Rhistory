library(caret)
library(e1071)
install.packages(e1071)
install.packages("e1071")
install.packages("e1071")
library(e1071)
marine.data=read.csv("dolphin_svm.csv",
stringsAsFactors = F)
head(marine.data)
sum(is.na(marine.data))
marine.data$class = factor(marine.data$class)
set.seed(1)
train.data = marine.data[train.indices,]
test.data=marine.data[-train.indices,]
set.seed(1)
train.indices = sample(1:nrow(marine.data),0.7*nrow(marine.data))
train.data = marine.data[train.indices,]
test.data=marine.data[-train.indices,]
model.svm.0= svm(class~.,
data=train.data,
kernel="linear",
cost=0.1,
scale = F)
plot(model.svm.0,train.data)
summary(model.svm.0)
model.svm.1= svm(class~.,
data=train.data,
kernel="linear",
cost=100
scale = F)
plot(model.svm.1,train.data)
summary(model.svm.1)
model.svm.1= svm(class~.,
data=train.data,
kernel="linear",
cost=100,
scale = F)
plot(model.svm.1,train.data)
summary(model.svm.1)
model.svm.2= svm(class~.,
data=train.data,
kernel="linear",
cost=10000,
scale = F)
plot(model.svm.2,train.data)
summary(model.svm.2)
model.svm.2= svm(class~.,
data=train.data,
kernel="linear",
cost=100000,
scale = F)
plot(model.svm.2,train.data)
summary(model.svm.2)
#model with cost =10000
model.svm.2= svm(class~.,
data=train.data,
kernel="linear",
cost=1000000000,
scale = F)
plot(model.svm.2,train.data)
summary(model.svm.2)
tune.svm = tune(svm,
class~.,
data=train.data,
kernel="linear")
summary(tune.svm)
tune.svm = tune(svm,
class~.,
data=train.data,
kernel="linear",
ranges = c(0.001,0.01,0.1,0.5,1,10,100))
summary(tune.svm)
tune.svm = tune(svm,
class~.,
data=train.data,
kernel="linear",
ranges =list(cost =c(0.001,0.01,0.1,0.5,1,10,100)))
summary(tune.svm)
best.mod = tune.svm$best.model
plot(best.mod,train.data)
summary(best.mod)
best.mod
ypred = predict(best.mod,test.data)
table(predicted = ypred,truth=test.data$class)
confusionMatrix(ypred,test.data$class)
ypred = predict(model.svm.1,test.data)
table(predicted = ypred,truth=test.data$class)
